"""
Main GUI Application for Student Attendance System
Giao di·ªán ch√≠nh cho h·ªá th·ªëng ƒëi·ªÉm danh h·ªçc sinh
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import cv2
from PIL import Image, ImageTk
import os
import sys
import numpy as np
import threading
import time
from datetime import datetime, date, timedelta
import pandas as pd

# Add parent directory to path to import database module
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from database.models import DatabaseManager

class AttendanceSystemGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("H·ªá th·ªëng ƒêi·ªÉm danh H·ªçc sinh - Face Recognition")
        self.root.geometry("1200x800")
        self.root.configure(bg='#f0f0f0')
        
        # Initialize database
        self.db = DatabaseManager()
        
        # Variables
        self.current_session_id = None
        self.camera = None
        self.is_recognizing = False
        self.camera_thread = None
        
        # Face recognition variables
        self.face_cascade = None
        self.face_recognizer = None
        self.face_names = {}  # Dictionary to map IDs to names
        self.last_recognition_time = {}  # To prevent duplicate recognitions
        
        # Initialize face recognition
        self.init_face_recognition()
        
        # Setup GUI
        self.setup_gui()
        
    def init_face_recognition(self):
        """Initialize face recognition components"""
        try:
            # Load Haar cascade from assets folder
            # Current file: src/gui/main_app.py -> go up 3 levels to project root
            current_file = os.path.abspath(__file__)
            project_root = os.path.dirname(os.path.dirname(os.path.dirname(current_file)))
            cascade_path = os.path.join(project_root, 'assets', 'haarcascade_frontalface_default.xml')
            
            print(f"üîç Looking for cascade at: {cascade_path}")
            print(f"   Exists: {os.path.exists(cascade_path)}")
            self.face_cascade = cv2.CascadeClassifier(cascade_path)
            
            # Initialize numpy-based face recognition
            self.trained_faces = None
            self.trained_ids = None
            
            # Load training data if available
            if self.load_training_data():
                print("‚úÖ Numpy-based face recognition initialized successfully")
            else:
                print("‚ö†Ô∏è No training data found - please train the model first")
            
            # Load names from database
            self.load_face_names()
            
        except Exception as e:
            print(f"‚ö†Ô∏è Face recognition initialization error: {e}")
            messagebox.showwarning("C·∫£nh b√°o", f"Kh√¥ng th·ªÉ kh·ªüi t·∫°o nh·∫≠n di·ªán khu√¥n m·∫∑t: {e}")
    
    def load_face_names(self):
        """Load student names for face recognition"""
        try:
            students = self.db.get_all_students()
            self.face_names = {}
            for student in students:
                # Use student database ID as the key
                self.face_names[student[0]] = student[2]  # student[0] = id, student[2] = full_name
            print(f"‚úÖ Loaded {len(self.face_names)} student names for recognition")
        except Exception as e:
            print(f"‚ùå Error loading face names: {e}")
        
    def setup_gui(self):
        """Setup main GUI layout"""
        # Main title
        title_frame = tk.Frame(self.root, bg='#2c3e50', height=80)
        title_frame.pack(fill='x')
        title_frame.pack_propagate(False)
        
        title_label = tk.Label(
            title_frame, 
            text="üéì H·ªÜ TH·ªêNG ƒêI·ªÇM DANH H·ªåC SINH",
            font=('Arial', 20, 'bold'),
            fg='white',
            bg='#2c3e50'
        )
        title_label.pack(expand=True)
        
        # Create notebook for tabs
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Create tabs
        self.create_student_management_tab()
        self.create_attendance_tab()
        self.create_reports_tab()
        self.create_settings_tab()
        
    def create_student_management_tab(self):
        """T·∫°o tab qu·∫£n l√Ω h·ªçc sinh"""
        student_frame = ttk.Frame(self.notebook)
        self.notebook.add(student_frame, text="üë• Qu·∫£n l√Ω H·ªçc sinh")
        
        # Left panel - Student list
        left_panel = ttk.LabelFrame(student_frame, text="Danh s√°ch H·ªçc sinh", padding=10)
        left_panel.pack(side='left', fill='both', expand=True, padx=(0, 5))
        
        # Class selection
        class_frame = tk.Frame(left_panel)
        class_frame.pack(fill='x', pady=(0, 10))
        
        tk.Label(class_frame, text="Ch·ªçn l·ªõp:", font=('Arial', 10, 'bold')).pack(side='left')
        self.class_var = tk.StringVar()
        self.class_combo = ttk.Combobox(class_frame, textvariable=self.class_var, state='readonly')
        self.class_combo.pack(side='left', padx=(10, 0), fill='x', expand=True)
        self.class_combo.bind('<<ComboboxSelected>>', self.load_students)
        
        # Student list
        columns = ('ID', 'M√£ HS', 'T√™n', 'Email', 'ƒêi·ªán tho·∫°i')
        self.student_tree = ttk.Treeview(left_panel, columns=columns, show='tree headings', height=15)
        
        for col in columns:
            self.student_tree.heading(col, text=col)
            self.student_tree.column(col, width=100)
            
        # Scrollbar for student list
        student_scrollbar = ttk.Scrollbar(left_panel, orient='vertical', command=self.student_tree.yview)
        self.student_tree.configure(yscrollcommand=student_scrollbar.set)
        
        self.student_tree.pack(side='left', fill='both', expand=True)
        student_scrollbar.pack(side='right', fill='y')
        
        # Bind event for student selection
        self.student_tree.bind('<<TreeviewSelect>>', self.on_student_select)
        
        # Right panel - Student details and actions
        right_panel = ttk.LabelFrame(student_frame, text="Th√¥ng tin H·ªçc sinh", padding=10)
        right_panel.pack(side='right', fill='y', padx=(5, 0))
        
        # Student form
        form_frame = tk.Frame(right_panel)
        form_frame.pack(fill='x', pady=(0, 20))
        
        # Student ID
        tk.Label(form_frame, text="M√£ h·ªçc sinh:").grid(row=0, column=0, sticky='w', pady=2)
        self.student_id_var = tk.StringVar()
        tk.Entry(form_frame, textvariable=self.student_id_var, width=30).grid(row=0, column=1, pady=2, padx=(10, 0))
        
        # Full name
        tk.Label(form_frame, text="H·ªç v√† t√™n:").grid(row=1, column=0, sticky='w', pady=2)
        self.full_name_var = tk.StringVar()
        tk.Entry(form_frame, textvariable=self.full_name_var, width=30).grid(row=1, column=1, pady=2, padx=(10, 0))
        
        # Email
        tk.Label(form_frame, text="Email:").grid(row=2, column=0, sticky='w', pady=2)
        self.email_var = tk.StringVar()
        tk.Entry(form_frame, textvariable=self.email_var, width=30).grid(row=2, column=1, pady=2, padx=(10, 0))
        
        # Phone
        tk.Label(form_frame, text="ƒêi·ªán tho·∫°i:").grid(row=3, column=0, sticky='w', pady=2)
        self.phone_var = tk.StringVar()
        tk.Entry(form_frame, textvariable=self.phone_var, width=30).grid(row=3, column=1, pady=2, padx=(10, 0))
        
        # Class for new student
        tk.Label(form_frame, text="L·ªõp:").grid(row=4, column=0, sticky='w', pady=2)
        self.new_class_var = tk.StringVar()
        self.new_class_combo = ttk.Combobox(form_frame, textvariable=self.new_class_var, state='readonly', width=27)
        self.new_class_combo.grid(row=4, column=1, pady=2, padx=(10, 0))
        
        # Buttons
        button_frame = tk.Frame(right_panel)
        button_frame.pack(fill='x', pady=10)
        
        tk.Button(
            button_frame, 
            text="‚ûï Th√™m H·ªçc sinh", 
            command=self.add_student,
            bg='#27ae60', 
            fg='white', 
            font=('Arial', 10, 'bold'),
            padx=20
        ).pack(fill='x', pady=2)
        
        tk.Button(
            button_frame, 
            text="üì∏ Thu th·∫≠p ·∫¢nh", 
            command=self.collect_face_data,
            bg='#3498db', 
            fg='white', 
            font=('Arial', 10, 'bold'),
            padx=20
        ).pack(fill='x', pady=2)
        
        tk.Button(
            button_frame, 
            text="üîÑ C·∫≠p nh·∫≠t", 
            command=self.update_student,
            bg='#f39c12', 
            fg='white', 
            font=('Arial', 10, 'bold'),
            padx=20
        ).pack(fill='x', pady=2)
        
        tk.Button(
            button_frame, 
            text="üóëÔ∏è X√≥a", 
            command=self.delete_student,
            bg='#e74c3c', 
            fg='white', 
            font=('Arial', 10, 'bold'),
            padx=20
        ).pack(fill='x', pady=2)
        
        tk.Button(
            button_frame, 
            text="üßπ X√≥a Form", 
            command=self.clear_student_form,
            bg='#95a5a6', 
            fg='white', 
            font=('Arial', 10, 'bold'),
            padx=20
        ).pack(fill='x', pady=2)
        
        # Load initial data
        self.load_classes()
        # Load students for first class if available
        if hasattr(self, 'class_var') and self.class_var.get():
            self.load_students()
        self.load_students()  # Load students for default class
        
    def create_attendance_tab(self):
        """T·∫°o tab ƒëi·ªÉm danh"""
        attendance_frame = ttk.Frame(self.notebook)
        self.notebook.add(attendance_frame, text="‚úÖ ƒêi·ªÉm danh")
        
        # Top panel - Session management
        session_panel = ttk.LabelFrame(attendance_frame, text="Qu·∫£n l√Ω Phi√™n ƒëi·ªÉm danh", padding=10)
        session_panel.pack(fill='x', padx=10, pady=(10, 5))
        
        # Session form
        session_form = tk.Frame(session_panel)
        session_form.pack(fill='x')
        
        tk.Label(session_form, text="T√™n phi√™n:").grid(row=0, column=0, sticky='w', padx=(0, 10))
        self.session_name_var = tk.StringVar(value=f"ƒêi·ªÉm danh {datetime.now().strftime('%d/%m/%Y')}")
        tk.Entry(session_form, textvariable=self.session_name_var, width=20).grid(row=0, column=1, padx=(0, 20))
        
        tk.Label(session_form, text="L·ªõp:").grid(row=0, column=2, sticky='w', padx=(0, 10))
        self.session_class_var = tk.StringVar()
        self.session_class_combo = ttk.Combobox(session_form, textvariable=self.session_class_var, state='readonly', width=15)
        self.session_class_combo['values'] = ('12A1', '12A2', '12A3', '12A4', '12A5')
        self.session_class_combo.set('12A1')  # Set default selection
        self.session_class_combo.grid(row=0, column=3, padx=(0, 20))
        
        tk.Button(
            session_form, 
            text="üöÄ B·∫Øt ƒë·∫ßu ƒêi·ªÉm danh",
            command=self.start_attendance_session,
            bg='#27ae60',
            fg='white',
            font=('Arial', 10, 'bold')
        ).grid(row=0, column=4, padx=10)
        
        tk.Button(
            session_form, 
            text="‚èπÔ∏è K·∫øt th√∫c",
            command=self.end_attendance_session,
            bg='#e74c3c',
            fg='white',
            font=('Arial', 10, 'bold')
        ).grid(row=0, column=5, padx=10)
        
        # Middle panel - Camera view
        camera_panel = ttk.LabelFrame(attendance_frame, text="Camera Nh·∫≠n di·ªán", padding=10)
        camera_panel.pack(fill='both', expand=True, padx=10, pady=5)
        
        # Camera control buttons
        camera_controls = tk.Frame(camera_panel)
        camera_controls.pack(fill='x', pady=(0, 10))
        
        tk.Button(
            camera_controls,
            text="üìπ B·∫≠t Camera",
            command=self.start_camera,
            bg='#2ecc71',
            fg='white',
            font=('Arial', 10, 'bold'),
            padx=20
        ).pack(side='left', padx=(0, 10))
        
        tk.Button(
            camera_controls,
            text="‚èπÔ∏è T·∫Øt Camera", 
            command=self.stop_camera,
            bg='#e74c3c',
            fg='white',
            font=('Arial', 10, 'bold'),
            padx=20
        ).pack(side='left', padx=(0, 10))
        
        tk.Button(
            camera_controls,
            text="ü§ñ B·∫≠t Nh·∫≠n di·ªán",
            command=self.toggle_recognition,
            bg='#3498db',
            fg='white',
            font=('Arial', 10, 'bold'),
            padx=20
        ).pack(side='left', padx=(0, 10))
        
        # Camera display
        self.camera_label = tk.Label(camera_panel, text="üì∑ Camera ch∆∞a b·∫≠t\n\nClick 'B·∫≠t Camera' ƒë·ªÉ b·∫Øt ƒë·∫ßu", bg='black', fg='white', width=80, height=20, font=('Arial', 12))
        self.camera_label.pack(side='left', fill='both', expand=True)
        
        # Attendance list
        attendance_list_frame = tk.Frame(camera_panel)
        attendance_list_frame.pack(side='right', fill='y', padx=(10, 0))
        
        tk.Label(attendance_list_frame, text="ƒê√£ ƒëi·ªÉm danh:", font=('Arial', 12, 'bold')).pack()
        
        self.attendance_listbox = tk.Listbox(attendance_list_frame, width=30, height=15)
        self.attendance_listbox.pack(fill='both', expand=True)
        
        # Status panel
        status_panel = tk.Frame(attendance_frame)
        status_panel.pack(fill='x', padx=10, pady=(5, 10))
        
        self.status_label = tk.Label(
            status_panel, 
            text="Tr·∫°ng th√°i: Ch∆∞a b·∫Øt ƒë·∫ßu", 
            font=('Arial', 12, 'bold'),
            fg='blue'
        )
        self.status_label.pack(side='left')
        
        self.attendance_count_label = tk.Label(
            status_panel, 
            text="ƒê√£ ƒëi·ªÉm danh: 0", 
            font=('Arial', 12, 'bold'),
            fg='green'
        )
        self.attendance_count_label.pack(side='right')
        
    def create_reports_tab(self):
        """T·∫°o tab b√°o c√°o"""
        reports_frame = ttk.Frame(self.notebook)
        self.notebook.add(reports_frame, text="üìä B√°o c√°o")
        
        # Main container
        main_container = tk.Frame(reports_frame)
        main_container.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Left panel - Report options
        left_panel = ttk.LabelFrame(main_container, text="T√πy ch·ªçn B√°o c√°o", padding=10)
        left_panel.pack(side='left', fill='y', padx=(0, 10))
        left_panel.configure(width=350)
        
        # Report type selection
        report_type_frame = tk.Frame(left_panel)
        report_type_frame.pack(fill='x', pady=(0, 15))
        
        tk.Label(report_type_frame, text="Lo·∫°i b√°o c√°o:", font=('Arial', 10, 'bold')).pack(anchor='w')
        self.report_type_var = tk.StringVar(value="daily")
        
        report_types = [
            ("üìÖ B√°o c√°o theo ng√†y", "daily"),
            ("üìö B√°o c√°o theo l·ªõp", "class"),
            ("üë§ B√°o c√°o theo h·ªçc sinh", "student"),
            ("üìà Th·ªëng k√™ t·ªïng h·ª£p", "summary"),
            ("‚è∞ Ph√¢n t√≠ch xu h∆∞·ªõng", "trends")
        ]
        
        for text, value in report_types:
            tk.Radiobutton(
                report_type_frame,
                text=text,
                variable=self.report_type_var,
                value=value,
                font=('Arial', 9),
                command=self.update_report_options
            ).pack(anchor='w', padx=20)
        
        # Date range selection
        date_frame = tk.Frame(left_panel)
        date_frame.pack(fill='x', pady=(0, 15))
        
        tk.Label(date_frame, text="Kho·∫£ng th·ªùi gian:", font=('Arial', 10, 'bold')).pack(anchor='w')
        
        # From date
        from_frame = tk.Frame(date_frame)
        from_frame.pack(fill='x', pady=2)
        tk.Label(from_frame, text="T·ª´ ng√†y:").pack(side='left')
        self.from_date_var = tk.StringVar(value=(datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d'))
        tk.Entry(from_frame, textvariable=self.from_date_var, width=12).pack(side='right')
        
        # To date  
        to_frame = tk.Frame(date_frame)
        to_frame.pack(fill='x', pady=2)
        tk.Label(to_frame, text="ƒê·∫øn ng√†y:").pack(side='left')
        self.to_date_var = tk.StringVar(value=datetime.now().strftime('%Y-%m-%d'))
        tk.Entry(to_frame, textvariable=self.to_date_var, width=12).pack(side='right')
        
        # Quick date buttons
        quick_date_frame = tk.Frame(date_frame)
        quick_date_frame.pack(fill='x', pady=5)
        
        quick_dates = [
            ("H√¥m nay", 0),
            ("7 ng√†y", 7),
            ("30 ng√†y", 30),
            ("90 ng√†y", 90)
        ]
        
        for text, days in quick_dates:
            tk.Button(
                quick_date_frame,
                text=text,
                command=lambda d=days: self.set_quick_date_range(d),
                bg='#ecf0f1',
                font=('Arial', 8),
                relief='groove'
            ).pack(side='left', padx=2, fill='x', expand=True)
        
        # Class filter (for relevant reports)
        self.class_filter_frame = tk.Frame(left_panel)
        self.class_filter_frame.pack(fill='x', pady=(0, 15))
        
        tk.Label(self.class_filter_frame, text="L·ªçc theo l·ªõp:", font=('Arial', 10, 'bold')).pack(anchor='w')
        self.report_class_var = tk.StringVar()
        self.report_class_combo = ttk.Combobox(self.class_filter_frame, textvariable=self.report_class_var, state='readonly')
        self.report_class_combo.pack(fill='x', pady=2)
        
        # Student filter (for student reports)
        self.student_filter_frame = tk.Frame(left_panel)
        
        tk.Label(self.student_filter_frame, text="Ch·ªçn h·ªçc sinh:", font=('Arial', 10, 'bold')).pack(anchor='w')
        self.report_student_var = tk.StringVar()
        self.report_student_combo = ttk.Combobox(self.student_filter_frame, textvariable=self.report_student_var, state='readonly')
        self.report_student_combo.pack(fill='x', pady=2)
        
        # Action buttons
        button_frame = tk.Frame(left_panel)
        button_frame.pack(fill='x', pady=15)
        
        tk.Button(
            button_frame,
            text="üîç Xem B√°o c√°o",
            command=self.generate_report_preview,
            bg='#3498db',
            fg='white',
            font=('Arial', 12, 'bold'),
            pady=8
        ).pack(fill='x', pady=(0, 5))
        
        tk.Button(
            button_frame,
            text="üìä Xu·∫•t Excel",
            command=self.export_excel_report,
            bg='#27ae60',
            fg='white',
            font=('Arial', 12, 'bold'),
            pady=8
        ).pack(fill='x', pady=(0, 5))
        
        tk.Button(
            button_frame,
            text="üìà Xem Bi·ªÉu ƒë·ªì",
            command=self.show_report_charts,
            bg='#9b59b6',
            fg='white',
            font=('Arial', 12, 'bold'),
            pady=8
        ).pack(fill='x')
        
        # Right panel - Report display
        right_panel = ttk.LabelFrame(main_container, text="K·∫øt qu·∫£ B√°o c√°o", padding=10)
        right_panel.pack(side='right', fill='both', expand=True)
        
        # Report summary
        self.report_summary_frame = tk.Frame(right_panel)
        self.report_summary_frame.pack(fill='x', pady=(0, 10))
        
        # Report content area with scrollbar
        content_frame = tk.Frame(right_panel)
        content_frame.pack(fill='both', expand=True)
        
        # Treeview for displaying report data
        self.report_tree = ttk.Treeview(content_frame, show='headings', height=20)
        
        # Scrollbars
        v_scrollbar = ttk.Scrollbar(content_frame, orient='vertical', command=self.report_tree.yview)
        h_scrollbar = ttk.Scrollbar(content_frame, orient='horizontal', command=self.report_tree.xview)
        self.report_tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        
        # Pack treeview and scrollbars
        self.report_tree.grid(row=0, column=0, sticky='nsew')
        v_scrollbar.grid(row=0, column=1, sticky='ns')
        h_scrollbar.grid(row=1, column=0, sticky='ew')
        
        content_frame.grid_rowconfigure(0, weight=1)
        content_frame.grid_columnconfigure(0, weight=1)
        
        # Initialize report options
        self.init_report_data()
        self.update_report_options()
        
    def create_settings_tab(self):
        """T·∫°o tab c√†i ƒë·∫∑t"""
        settings_frame = ttk.Frame(self.notebook)
        self.notebook.add(settings_frame, text="‚öôÔ∏è C√†i ƒë·∫∑t")
        
        # Class management
        class_mgmt_frame = ttk.LabelFrame(settings_frame, text="Qu·∫£n l√Ω L·ªõp h·ªçc", padding=10)
        class_mgmt_frame.pack(fill='x', padx=10, pady=10)
        
        class_form = tk.Frame(class_mgmt_frame)
        class_form.pack(fill='x')
        
        tk.Label(class_form, text="T√™n l·ªõp:").grid(row=0, column=0, sticky='w', padx=(0, 10))
        self.new_class_name_var = tk.StringVar()
        tk.Entry(class_form, textvariable=self.new_class_name_var, width=20).grid(row=0, column=1, padx=(0, 20))
        
        tk.Label(class_form, text="M√£ l·ªõp:").grid(row=0, column=2, sticky='w', padx=(0, 10))
        self.new_class_code_var = tk.StringVar()
        tk.Entry(class_form, textvariable=self.new_class_code_var, width=15).grid(row=0, column=3, padx=(0, 20))
        
        tk.Button(
            class_form, 
            text="‚ûï Th√™m L·ªõp",
            command=self.add_class,
            bg='#3498db',
            fg='white',
            font=('Arial', 10, 'bold')
        ).grid(row=0, column=4, padx=10)
        
        # Face Recognition Training
        face_mgmt_frame = ttk.LabelFrame(settings_frame, text="ü§ñ Qu·∫£n l√Ω Nh·∫≠n di·ªán Khu√¥n m·∫∑t", padding=10)
        face_mgmt_frame.pack(fill='x', padx=10, pady=10)
        
        # Training info
        info_text = """
üì∏ Quy tr√¨nh nh·∫≠n di·ªán khu√¥n m·∫∑t:
1. Th√™m h·ªçc sinh v√†o h·ªá th·ªëng
2. Thu th·∫≠p ·∫£nh khu√¥n m·∫∑t (30 ·∫£nh/h·ªçc sinh)
3. Train model nh·∫≠n di·ªán
4. S·ª≠ d·ª•ng trong ƒëi·ªÉm danh
        """
        
        tk.Label(
            face_mgmt_frame,
            text=info_text,
            font=('Arial', 10),
            justify='left',
            fg='#2c3e50'
        ).pack(anchor='w', pady=(0, 10))
        
        # Training buttons
        training_buttons = tk.Frame(face_mgmt_frame)
        training_buttons.pack(fill='x')
        
        tk.Button(
            training_buttons,
            text="üß† Train Face Recognition Model",
            command=self.train_face_model,
            bg='#9b59b6',
            fg='white',
            font=('Arial', 12, 'bold'),
            padx=20,
            pady=10
        ).pack(side='left', padx=(0, 10))
        
        tk.Button(
            training_buttons,
            text="üìÅ M·ªü th∆∞ m·ª•c Dataset",
            command=self.open_dataset_folder,
            bg='#f39c12',
            fg='white',
            font=('Arial', 12, 'bold'),
            padx=20,
            pady=10
        ).pack(side='left', padx=(0, 10))
        
        tk.Button(
            training_buttons,
            text="üîÑ Reload Face Model",
            command=self.reload_face_model,
            bg='#16a085',
            fg='white',
            font=('Arial', 12, 'bold'),
            padx=20,
            pady=10
        ).pack(side='left')
        
    # === Event Handlers ===
    def load_classes(self):
        """Load danh s√°ch l·ªõp h·ªçc"""
        try:
            classes = self.db.get_all_classes()
            class_list = [f"{cls[2]} - {cls[1]}" for cls in classes]  # code - name
            
            print(f"üìö Loaded {len(classes)} classes: {class_list}")
            
            # Update combo boxes that exist
            if hasattr(self, 'class_combo') and self.class_combo:
                self.class_combo['values'] = class_list
                if class_list:
                    self.class_combo.set(class_list[0])
                    self.class_var.set(class_list[0])
            
            if hasattr(self, 'new_class_combo') and self.new_class_combo:
                self.new_class_combo['values'] = class_list
                if class_list:
                    self.new_class_combo.set(class_list[0])
            
            if hasattr(self, 'session_class_combo') and self.session_class_combo:
                self.session_class_combo['values'] = class_list
                if class_list:
                    self.session_class_combo.set(class_list[0])
        except Exception as e:
            print(f"‚ùå Error loading classes: {e}")
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch l·ªõp: {e}")
            
    def load_students(self, event=None):
        """Load danh s√°ch h·ªçc sinh theo l·ªõp"""
        if not self.class_var.get():
            return
            
        # Extract class ID from combo selection
        try:
            class_code = self.class_var.get().split(' - ')[0]
            classes = self.db.get_all_classes()
            class_id = None
            for cls in classes:
                if cls[2] == class_code:  # cls[2] is class_code
                    class_id = cls[0]  # cls[0] is id
                    break
            
            if class_id:
                students = self.db.get_students_by_class(class_id)
                
                # Clear existing items
                for item in self.student_tree.get_children():
                    self.student_tree.delete(item)
                
                # Add students to tree
                for student in students:
                    self.student_tree.insert('', 'end', values=(
                        student[0],  # id
                        student[1],  # student_id
                        student[2],  # full_name
                        student[4] or '',  # email
                        student[5] or ''   # phone
                    ))
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch h·ªçc sinh: {e}")
            
    def add_student(self):
        """Th√™m h·ªçc sinh m·ªõi"""
        try:
            # Validate input
            if not all([self.student_id_var.get(), self.full_name_var.get(), self.new_class_var.get()]):
                messagebox.showerror("L·ªói", "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc")
                return
            
            # Get class ID
            class_code = self.new_class_var.get().split(' - ')[0]
            classes = self.db.get_all_classes()
            class_id = None
            for cls in classes:
                if cls[2] == class_code:
                    class_id = cls[0]
                    break
            
            if not class_id:
                messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc")
                return
            
            # Add student
            self.db.add_student(
                self.student_id_var.get(),
                self.full_name_var.get(),
                class_id,
                self.email_var.get(),
                self.phone_var.get()
            )
            
            # Clear form
            self.clear_student_form()
            
            # Reload student list
            self.load_students()
            
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ th√™m h·ªçc sinh th√†nh c√¥ng!")
            
        except ValueError as e:
            messagebox.showerror("L·ªói", str(e))
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ th√™m h·ªçc sinh: {e}")
            
    def clear_student_form(self):
        """X√≥a form th√¥ng tin h·ªçc sinh"""
        self.student_id_var.set('')
        self.full_name_var.set('')
        self.email_var.set('')
        self.phone_var.set('')
        
    def collect_face_data(self):
        """Thu th·∫≠p d·ªØ li·ªáu khu√¥n m·∫∑t cho h·ªçc sinh"""
        selection = self.student_tree.selection()
        if not selection:
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn h·ªçc sinh c·∫ßn thu th·∫≠p ·∫£nh")
            return
        
        # Get selected student info
        item = self.student_tree.item(selection[0])
        student_data = item['values']
        student_id = student_data[0]  # Database ID
        student_code = student_data[1]  # Student code
        student_name = student_data[2]  # Full name
        
        # Confirm with user
        response = messagebox.askyesno(
            "X√°c nh·∫≠n", 
            f"Thu th·∫≠p ·∫£nh cho h·ªçc sinh: {student_name} ({student_code})\n\n"
            "H·ªá th·ªëng s·∫Ω thu th·∫≠p 30 ·∫£nh khu√¥n m·∫∑t.\n"
            "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng?"
        )
        
        if not response:
            return
        
        # Start face data collection
        self.start_face_collection(student_id, student_name)
        
    def update_student(self):
        """C·∫≠p nh·∫≠t th√¥ng tin h·ªçc sinh"""
        try:
            # Ki·ªÉm tra xem c√≥ h·ªçc sinh n√†o ƒë∆∞·ª£c ch·ªçn kh√¥ng
            selected = self.student_tree.selection()
            if not selected:
                messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn h·ªçc sinh c·∫ßn c·∫≠p nh·∫≠t")
                return
            
            # L·∫•y th√¥ng tin h·ªçc sinh ƒë∆∞·ª£c ch·ªçn
            item = self.student_tree.item(selected[0])
            student_id = item['values'][0]  # ID column
            
            # L·∫•y th√¥ng tin hi·ªán t·∫°i t·ª´ form
            student_code = self.student_id_var.get().strip()
            full_name = self.full_name_var.get().strip()
            email = self.email_var.get().strip()
            phone = self.phone_var.get().strip()
            class_name = self.new_class_var.get().strip()
            
            # Validation
            if not all([student_code, full_name]):
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß m√£ h·ªçc sinh v√† h·ªç t√™n")
                return
            
            # T√¨m class_id t·ª´ class_name
            class_id = None
            if class_name:
                classes = self.db.get_all_classes()
                for cls in classes:
                    if cls[1] == class_name:  # class_name column
                        class_id = cls[0]
                        break
                
                if class_id is None:
                    messagebox.showerror("L·ªói", f"Kh√¥ng t√¨m th·∫•y l·ªõp '{class_name}'")
                    return
            
            # X√°c nh·∫≠n c·∫≠p nh·∫≠t
            confirm = messagebox.askyesno(
                "X√°c nh·∫≠n", 
                f"B·∫°n c√≥ ch·∫Øc mu·ªën c·∫≠p nh·∫≠t th√¥ng tin h·ªçc sinh '{full_name}'?"
            )
            
            if not confirm:
                return
            
            # Th·ª±c hi·ªán c·∫≠p nh·∫≠t
            success = self.db.update_student(
                student_id=student_id,  # This is the database ID
                student_code=student_code,  # This will be stored in student_id column
                full_name=full_name,
                class_id=class_id,
                email=email if email else None,
                phone=phone if phone else None
            )
            
            if success:
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin h·ªçc sinh th√†nh c√¥ng!")
                self.load_students()  # Refresh danh s√°ch
                self.clear_student_form()  # Clear form
            else:
                messagebox.showwarning("Th√¥ng b√°o", "Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë∆∞·ª£c th·ª±c hi·ªán")
                
        except ValueError as ve:
            messagebox.showerror("L·ªói", str(ve))
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t h·ªçc sinh: {e}")
        
    def delete_student(self):
        """X√≥a h·ªçc sinh v√† t·∫•t c·∫£ d·ªØ li·ªáu li√™n quan"""
        try:
            # Ki·ªÉm tra xem c√≥ h·ªçc sinh n√†o ƒë∆∞·ª£c ch·ªçn kh√¥ng
            selected = self.student_tree.selection()
            if not selected:
                messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn h·ªçc sinh c·∫ßn x√≥a")
                return
            
            # L·∫•y th√¥ng tin h·ªçc sinh ƒë∆∞·ª£c ch·ªçn
            item = self.student_tree.item(selected[0])
            student_id = item['values'][0]  # ID column
            student_name = item['values'][2]  # Name column
            
            # X√°c nh·∫≠n x√≥a v·ªõi c·∫£nh b√°o nghi√™m tr·ªçng
            confirm = messagebox.askyesno(
                "‚ö†Ô∏è X√ÅC NH·∫¨N X√ìA", 
                f"C·∫¢NH B√ÅO: B·∫°n s·∫Øp x√≥a h·ªçc sinh '{student_name}'\n\n"
                f"ƒêi·ªÅu n√†y s·∫Ω x√≥a Vƒ®NH VI·ªÑN:\n"
                f"‚Ä¢ Th√¥ng tin h·ªçc sinh\n"
                f"‚Ä¢ T·∫•t c·∫£ ·∫£nh khu√¥n m·∫∑t ƒë√£ thu th·∫≠p\n"
                f"‚Ä¢ L·ªãch s·ª≠ ƒëi·ªÉm danh\n"
                f"‚Ä¢ D·ªØ li·ªáu nh·∫≠n di·ªán\n\n"
                f"B·∫°n c√≥ CH·∫ÆC CH·∫ÆN mu·ªën ti·∫øp t·ª•c?",
                icon='warning'
            )
            
            if not confirm:
                return
            
            # X√°c nh·∫≠n l·∫ßn 2
            final_confirm = messagebox.askyesno(
                "‚ö†Ô∏è X√ÅC NH·∫¨N CU·ªêI C√ôNG",
                f"ƒê√¢y l√† c·∫£nh b√°o cu·ªëi c√πng!\n\n"
                f"X√≥a h·ªçc sinh '{student_name}' s·∫Ω KH√îNG TH·ªÇ HO√ÄN T√ÅC!\n\n"
                f"B·∫°n c√≥ th·ª±c s·ª± mu·ªën x√≥a?",
                icon='warning'
            )
            
            if not final_confirm:
                return
            
            # Th·ª±c hi·ªán x√≥a
            result = self.db.delete_student(student_id)
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            message = f"‚úÖ ƒê√£ x√≥a h·ªçc sinh '{result['full_name']}' th√†nh c√¥ng!\n\n"
            message += f"üìä Chi ti·∫øt:\n"
            message += f"‚Ä¢ B·∫£n ghi ƒëi·ªÉm danh: {result['attendance_records']}\n"
            message += f"‚Ä¢ D·ªØ li·ªáu nh·∫≠n di·ªán: {result['face_encodings']}\n"
            message += f"‚Ä¢ ·∫¢nh khu√¥n m·∫∑t: {result['face_images']}"
            
            messagebox.showinfo("X√≥a th√†nh c√¥ng", message)
            
            # Refresh danh s√°ch v√† clear form
            self.load_students()
            self.clear_student_form()
            
            # Reload face model n·∫øu c√≥ thay ƒë·ªïi v·ªÅ ·∫£nh
            if result['face_images'] > 0:
                try:
                    self.reload_face_model()
                except:
                    pass  # Ignore errors in model reload
                
        except ValueError as ve:
            messagebox.showerror("L·ªói", str(ve))
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ x√≥a h·ªçc sinh: {e}")
        
    def add_class(self):
        """Th√™m l·ªõp h·ªçc m·ªõi"""
        try:
            if not all([self.new_class_name_var.get(), self.new_class_code_var.get()]):
                messagebox.showerror("L·ªói", "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin l·ªõp h·ªçc")
                return
            
            self.db.add_class(
                self.new_class_name_var.get(),
                self.new_class_code_var.get()
            )
            
            # Clear form
            self.new_class_name_var.set('')
            self.new_class_code_var.set('')
            
            # Reload classes
            self.load_classes()
            
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ th√™m l·ªõp h·ªçc th√†nh c√¥ng!")
            
        except ValueError as e:
            messagebox.showerror("L·ªói", str(e))
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ th√™m l·ªõp h·ªçc: {e}")
            
    def start_attendance_session(self):
        """B·∫Øt ƒë·∫ßu phi√™n ƒëi·ªÉm danh"""
        try:
            if not all([self.session_name_var.get(), self.session_class_var.get()]):
                messagebox.showerror("L·ªói", "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin phi√™n ƒëi·ªÉm danh")
                return
            
            # Get class ID - handle both database format and predefined format
            selected_class = self.session_class_var.get()
            classes = self.db.get_all_classes()
            class_id = None
            
            # Check if it's database format "code - name" or just class name
            if ' - ' in selected_class:
                class_code = selected_class.split(' - ')[0]
                for cls in classes:
                    if cls[2] == class_code:
                        class_id = cls[0]
                        break
            else:
                # It's a predefined class name (12A1, 12A2, etc.) - find or create
                for cls in classes:
                    if cls[1] == selected_class or cls[2] == selected_class:
                        class_id = cls[0]
                        break
                
                # If class doesn't exist, create it
                if not class_id:
                    try:
                        class_id = self.db.add_class(selected_class, selected_class, f"L·ªõp {selected_class}")
                    except ValueError:
                        # Class already exists but wasn't found - try again
                        classes = self.db.get_all_classes()
                        for cls in classes:
                            if cls[1] == selected_class or cls[2] == selected_class:
                                class_id = cls[0]
                                break
            
            if not class_id:
                messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ t·∫°o ho·∫∑c t√¨m th·∫•y l·ªõp h·ªçc")
                return
            
            # Create attendance session
            self.current_session_id = self.db.create_attendance_session(
                self.session_name_var.get(),
                class_id,
                date.today().isoformat(),
                datetime.now().strftime('%H:%M:%S')
            )
            
            self.status_label.config(text="Tr·∫°ng th√°i: ƒêang ƒëi·ªÉm danh", fg='green')
            
            # Clear attendance list and reset recognition times
            self.attendance_listbox.delete(0, tk.END)
            self.last_recognition_time.clear()
            
            # Reload face names in case new students were added
            self.load_face_names()
            
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ b·∫Øt ƒë·∫ßu phi√™n ƒëi·ªÉm danh!\nB·∫°n c√≥ th·ªÉ b·∫≠t camera ƒë·ªÉ nh·∫≠n di·ªán khu√¥n m·∫∑t.")
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu phi√™n ƒëi·ªÉm danh: {e}")
            
    def end_attendance_session(self):
        """K·∫øt th√∫c phi√™n ƒëi·ªÉm danh"""
        if self.current_session_id:
            # Stop recognition and camera
            self.is_recognizing = False
            
            self.db.end_attendance_session(self.current_session_id)
            self.current_session_id = None
            self.status_label.config(text="Tr·∫°ng th√°i: ƒê√£ k·∫øt th√∫c", fg='red')
            
            # Update attendance count
            count = self.attendance_listbox.size()
            self.attendance_count_label.config(text=f"T·ªïng ƒëi·ªÉm danh: {count}")
            
            messagebox.showinfo("Th√¥ng b√°o", "ƒê√£ k·∫øt th√∫c phi√™n ƒëi·ªÉm danh!")
        else:
            messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ phi√™n ƒëi·ªÉm danh n√†o ƒëang ho·∫°t ƒë·ªông")
    
    # === Face Recognition Methods ===
    def convert_to_ascii(self, text):
        """Convert Vietnamese text to ASCII for OpenCV display"""
        # Vietnamese character mapping
        vietnamese_map = {
            '√†': 'a', '√°': 'a', '·∫°': 'a', '·∫£': 'a', '√£': 'a',
            '√¢': 'a', '·∫ß': 'a', '·∫•': 'a', '·∫≠': 'a', '·∫©': 'a', '·∫´': 'a',
            'ƒÉ': 'a', '·∫±': 'a', '·∫Ø': 'a', '·∫∑': 'a', '·∫≥': 'a', '·∫µ': 'a',
            '√®': 'e', '√©': 'e', '·∫π': 'e', '·∫ª': 'e', '·∫Ω': 'e',
            '√™': 'e', '·ªÅ': 'e', '·∫ø': 'e', '·ªá': 'e', '·ªÉ': 'e', '·ªÖ': 'e',
            '√¨': 'i', '√≠': 'i', '·ªã': 'i', '·ªâ': 'i', 'ƒ©': 'i',
            '√≤': 'o', '√≥': 'o', '·ªç': 'o', '·ªè': 'o', '√µ': 'o',
            '√¥': 'o', '·ªì': 'o', '·ªë': 'o', '·ªô': 'o', '·ªï': 'o', '·ªó': 'o',
            '∆°': 'o', '·ªù': 'o', '·ªõ': 'o', '·ª£': 'o', '·ªü': 'o', '·ª°': 'o',
            '√π': 'u', '√∫': 'u', '·ª•': 'u', '·ªß': 'u', '≈©': 'u',
            '∆∞': 'u', '·ª´': 'u', '·ª©': 'u', '·ª±': 'u', '·ª≠': 'u', '·ªØ': 'u',
            '·ª≥': 'y', '√Ω': 'y', '·ªµ': 'y', '·ª∑': 'y', '·ªπ': 'y',
            'ƒë': 'd', 'ƒê': 'D',
            # Uppercase
            '√Ä': 'A', '√Å': 'A', '·∫†': 'A', '·∫¢': 'A', '√É': 'A',
            '√Ç': 'A', '·∫¶': 'A', '·∫§': 'A', '·∫¨': 'A', '·∫®': 'A', '·∫™': 'A',
            'ƒÇ': 'A', '·∫∞': 'A', '·∫Æ': 'A', '·∫∂': 'A', '·∫≤': 'A', '·∫¥': 'A',
            '√à': 'E', '√â': 'E', '·∫∏': 'E', '·∫∫': 'E', '·∫º': 'E',
            '√ä': 'E', '·ªÄ': 'E', '·∫æ': 'E', '·ªÜ': 'E', '·ªÇ': 'E', '·ªÑ': 'E',
            '√å': 'I', '√ç': 'I', '·ªä': 'I', '·ªà': 'I', 'ƒ®': 'I',
            '√í': 'O', '√ì': 'O', '·ªå': 'O', '·ªé': 'O', '√ï': 'O',
            '√î': 'O', '·ªí': 'O', '·ªê': 'O', '·ªò': 'O', '·ªî': 'O', '·ªñ': 'O',
            '∆†': 'O', '·ªú': 'O', '·ªö': 'O', '·ª¢': 'O', '·ªû': 'O', '·ª†': 'O',
            '√ô': 'U', '√ö': 'U', '·ª§': 'U', '·ª¶': 'U', '≈®': 'U',
            '∆Ø': 'U', '·ª™': 'U', '·ª®': 'U', '·ª∞': 'U', '·ª¨': 'U', '·ªÆ': 'U',
            '·ª≤': 'Y', '√ù': 'Y', '·ª¥': 'Y', '·ª∂': 'Y', '·ª∏': 'Y'
        }
        
        # Convert each character
        result = ''
        for char in text:
            result += vietnamese_map.get(char, char)
        
        return result

    def load_training_data(self):
        """Load training data t·ª´ numpy files"""
        try:
            # Training data is in project_root/data/trainer/
            # Current file: src/gui/main_app.py -> go up 2 levels to project root  
            current_file = os.path.abspath(__file__)
            project_root = os.path.dirname(os.path.dirname(os.path.dirname(current_file)))
            trainer_dir = os.path.join(project_root, 'data', 'trainer')
            faces_path = os.path.join(trainer_dir, 'faces_data.npy')
            ids_path = os.path.join(trainer_dir, 'ids_data.npy')
            
            # Check training data files
            print(f"üîç Loading training data from: {trainer_dir}")
            
            if os.path.exists(faces_path) and os.path.exists(ids_path):
                self.trained_faces = np.load(faces_path, allow_pickle=True)
                self.trained_ids = np.load(ids_path, allow_pickle=True)
                print(f"‚úÖ Training data loaded: {len(self.trained_faces)} faces, {len(np.unique(self.trained_ids))} students")
                return True
            else:
                print("‚ùå Training data not found")
                self.trained_faces = None
                self.trained_ids = None
                return False
                
        except Exception as e:
            print(f"‚ùå Error loading training data: {e}")
            self.trained_faces = None
            self.trained_ids = None
            return False

    def recognize_face(self, face_roi):
        """Nh·∫≠n di·ªán khu√¥n m·∫∑t s·ª≠ d·ª•ng thu·∫≠t to√°n t·ª´ 03_face_recognition_fixed.py"""
        try:
            # Load training data if not already loaded
            if not hasattr(self, 'trained_faces') or self.trained_faces is None:
                self.load_training_data()
            
            if self.trained_faces is None or len(self.trained_faces) == 0:
                return "No Training Data", 0
            
            # Convert to grayscale if needed
            if len(face_roi.shape) == 3:
                face_roi = cv2.cvtColor(face_roi, cv2.COLOR_BGR2GRAY)
            
            # Use the same algorithm as 03_face_recognition_fixed.py
            best_match_id = 0
            best_confidence = float('inf')
            
            for i, stored_face in enumerate(self.trained_faces):
                try:
                    # Resize both images to same size for comparison
                    target_size = min(face_roi.shape[0], face_roi.shape[1], 
                                    stored_face.shape[0], stored_face.shape[1])
                    
                    if target_size > 20:  # Minimum size check from original
                        face_resized = cv2.resize(face_roi, (target_size, target_size))
                        stored_resized = cv2.resize(stored_face, (target_size, target_size))
                        
                        # Calculate mean absolute difference (lower is better)
                        diff = np.mean(np.abs(face_resized.astype(float) - stored_resized.astype(float)))
                        
                        if diff < best_confidence:
                            best_confidence = diff
                            best_match_id = self.trained_ids[i]
                            
                except Exception as e:
                    print(f"Error comparing face {i}: {e}")
                    continue
            
            # Convert to percentage confidence using original formula
            confidence = max(0, 100 - (best_confidence / 255 * 100))
            

            
            # Recognition threshold (same as original: 50%)
            if confidence > 50:  # Threshold for recognition
                name = self.face_names.get(best_match_id, f"Student_{best_match_id}")

                return name, 100 - confidence  # Return as error rate for consistency
            else:

                return "Unknown", 100 - confidence
                
        except Exception as e:
            print(f"Face recognition error: {e}")
            return "Unknown", 0

    # === Camera and Face Recognition Methods ===
    def start_camera(self):
        """B·∫Øt ƒë·∫ßu camera"""
        try:
            if self.camera is None:
                self.camera = cv2.VideoCapture(0)
                if not self.camera.isOpened():
                    messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ m·ªü camera")
                    self.camera = None
                    return
                
                # Start camera thread
                self.camera_thread = threading.Thread(target=self.update_camera, daemon=True)
                self.camera_thread.start()
                
                print("‚úÖ Camera started successfully")
            else:
                messagebox.showinfo("Th√¥ng b√°o", "Camera ƒë√£ ƒë∆∞·ª£c b·∫≠t")
                
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ b·∫≠t camera: {e}")
    
    def stop_camera(self):
        """D·ª´ng camera"""
        try:
            if self.camera is not None:
                self.camera.release()
                self.camera = None
                self.is_recognizing = False
                
                # Reset camera display
                self.camera_label.config(
                    image='',
                    text="üì∑ Camera ƒë√£ t·∫Øt\n\nClick 'B·∫≠t Camera' ƒë·ªÉ b·∫Øt ƒë·∫ßu",
                    bg='black',
                    fg='white'
                )
                self.camera_label.image = None
                
                print("‚úÖ Camera stopped")
            else:
                messagebox.showinfo("Th√¥ng b√°o", "Camera ch∆∞a ƒë∆∞·ª£c b·∫≠t")
                
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói khi t·∫Øt camera: {e}")
    
    def toggle_recognition(self):
        """B·∫≠t/t·∫Øt nh·∫≠n di·ªán khu√¥n m·∫∑t"""
        if self.camera is None:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng b·∫≠t camera tr∆∞·ªõc")
            return
        
        if not self.current_session_id:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng b·∫Øt ƒë·∫ßu phi√™n ƒëi·ªÉm danh tr∆∞·ªõc")
            return
        
        self.is_recognizing = not self.is_recognizing
        if self.is_recognizing:
            print("‚úÖ Face recognition enabled")
            messagebox.showinfo("Th√¥ng b√°o", "ƒê√£ b·∫≠t nh·∫≠n di·ªán khu√¥n m·∫∑t")
        else:
            print("‚è∏Ô∏è Face recognition disabled")
            messagebox.showinfo("Th√¥ng b√°o", "ƒê√£ t·∫Øt nh·∫≠n di·ªán khu√¥n m·∫∑t")
    
    def update_camera(self):
        """C·∫≠p nh·∫≠t h√¨nh ·∫£nh camera li√™n t·ª•c"""
        while self.camera is not None:
            try:
                ret, frame = self.camera.read()
                if not ret:
                    break
                
                # Flip frame horizontally for mirror effect
                frame = cv2.flip(frame, 1)
                
                # Process face recognition if enabled
                if self.is_recognizing and self.current_session_id:
                    frame = self.process_face_recognition(frame)
                
                # Convert frame to display format
                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                frame_pil = Image.fromarray(frame_rgb)
                frame_pil = frame_pil.resize((640, 480), Image.Resampling.LANCZOS)
                frame_tk = ImageTk.PhotoImage(frame_pil)
                
                # Update camera display
                self.camera_label.config(image=frame_tk, text='')
                self.camera_label.image = frame_tk
                
                time.sleep(0.03)  # ~30 FPS
                
            except Exception as e:
                print(f"Camera update error: {e}")
                break
    
    def process_face_recognition(self, frame):
        """X·ª≠ l√Ω nh·∫≠n di·ªán khu√¥n m·∫∑t"""
        try:
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            faces = self.face_cascade.detectMultiScale(gray, 1.2, 5)
            
            for (x, y, w, h) in faces:
                # Draw rectangle around face
                cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
                
                # Perform face recognition using numpy-based matching
                roi_gray = gray[y:y+h, x:x+w]
                name, confidence = self.recognize_face(roi_gray)
                

                
                # Check if we got a valid recognition
                if name != "Unknown" and name != "No Training Data":
                    # Extract ID from name if possible
                    try:
                        if name.startswith("Student_"):
                            id_ = int(name.split("_")[1])
                        else:
                            # Try to find ID from face_names
                            id_ = None
                            for student_id, student_name in self.face_names.items():
                                if student_name == name:
                                    id_ = student_id
                                    break
                            if id_ is None:
                                id_ = 0  # Default ID for unknown mapping
                        
                        # Calculate display confidence (higher is better for user display)
                        display_confidence = 100 - confidence
                        confidence_text = f"{display_confidence:.1f}%"
                        
                        # Record attendance if not recently recorded
                        current_time = time.time()
                        if (id_ not in self.last_recognition_time or 
                            current_time - self.last_recognition_time[id_] > 5):  # 5 second cooldown
                            
                            self.record_student_attendance(id_, display_confidence, name)
                            self.last_recognition_time[id_] = current_time
                        
                        # Convert Vietnamese name to ASCII for display
                        display_name = self.convert_to_ascii(name)
                        
                        # Display name and confidence
                        cv2.putText(frame, f"{display_name}", (x+5, y-5), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 255, 255), 2)
                        cv2.putText(frame, confidence_text, (x+5, y+h-10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)
                        
                    except Exception as e:
                        print(f"Error processing recognition result: {e}")
                        cv2.putText(frame, "Unknown", (x+5, y-5), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2)
                else:
                    # Display the error message from recognition
                    display_text = "No Model" if name == "No Training Data" else "Unknown"
                    cv2.putText(frame, display_text, (x+5, y-5), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 255) if name == "No Training Data" else (0, 0, 255), 2)
            
            # Add status text
            status_text = "Recognition: ON" if self.is_recognizing else "Recognition: OFF"
            cv2.putText(frame, status_text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0) if self.is_recognizing else (0, 0, 255), 2)
            
        except Exception as e:
            print(f"Face recognition error: {e}")
        
        return frame
    
    def record_student_attendance(self, student_id, confidence, student_name):
        """Ghi nh·∫≠n ƒëi·ªÉm danh cho h·ªçc sinh"""
        try:
            if self.current_session_id:
                # Record in database
                self.db.record_attendance(
                    self.current_session_id,
                    student_id,
                    100 - confidence,  # Convert to positive confidence
                    'present'
                )
                
                # Update attendance list in GUI (GUI supports Unicode, so use original name)
                timestamp = datetime.now().strftime('%H:%M:%S')
                attendance_text = f"{timestamp} - {student_name}"
                
                self.attendance_listbox.insert(0, attendance_text)
                
                # Update attendance count
                count = self.attendance_listbox.size()
                self.attendance_count_label.config(text=f"ƒê√£ ƒëi·ªÉm danh: {count}")
                
                print(f"‚úÖ Attendance recorded: {student_name} (ID: {student_id})")
                
        except Exception as e:
            print(f"‚ùå Error recording attendance: {e}")
    
    # === Face Training Methods ===
    def train_face_model(self):
        """Train face recognition model t·ª´ c√°c ·∫£nh ƒë√£ thu th·∫≠p - S·ª≠ d·ª•ng file training c√≥ s·∫µn"""
        try:
            # Dataset and trainer are in project_root/data/
            # __file__ is in src/gui/main_app.py, so we need 3 dirname() to get to project root
            project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
            dataset_dir = os.path.join(project_root, 'data', 'dataset')
            trainer_dir = os.path.join(project_root, 'data', 'trainer')
            
            # Check if dataset exists
            if not os.path.exists(dataset_dir) or not os.listdir(dataset_dir):
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng t√¨m th·∫•y ·∫£nh trong th∆∞ m·ª•c dataset!\nVui l√≤ng thu th·∫≠p ·∫£nh tr∆∞·ªõc.")
                return
            
            # Confirm training
            response = messagebox.askyesno(
                "X√°c nh·∫≠n Training", 
                "S·ª≠ d·ª•ng training script c√≥ s·∫µn ƒë·ªÉ train face model?\n\n"
                "Qu√° tr√¨nh n√†y s·∫Ω t·∫°o ra numpy arrays ƒë·ªÉ nh·∫≠n di·ªán khu√¥n m·∫∑t.\n"
                "Th·ªùi gian training t√πy thu·ªôc v√†o s·ªë l∆∞·ª£ng ·∫£nh."
            )
            
            if not response:
                return
            
            # Create progress window
            progress_window = tk.Toplevel(self.root)
            progress_window.title("Training Face Model")
            progress_window.geometry("400x200")
            progress_window.configure(bg='#2c3e50')
            progress_window.transient(self.root)
            progress_window.grab_set()
            
            tk.Label(
                progress_window,
                text="üß† Training Face Recognition Model",
                font=('Arial', 14, 'bold'),
                fg='white',
                bg='#2c3e50',
                pady=20
            ).pack()
            
            progress_label = tk.Label(
                progress_window,
                text="ƒêang x·ª≠ l√Ω ·∫£nh...",
                font=('Arial', 12),
                fg='white',
                bg='#2c3e50'
            )
            progress_label.pack(pady=10)
            
            # Start training in thread
            training_thread = threading.Thread(
                target=self.perform_training,
                args=(dataset_dir, trainer_dir, progress_label, progress_window),
                daemon=True
            )
            training_thread.start()
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu training: {e}")
    
    def perform_training(self, dataset_dir, trainer_dir, progress_label, progress_window):
        """Th·ª±c hi·ªán training s·ª≠ d·ª•ng logic t·ª´ 02_face_training_fixed.py"""
        try:
            # Create trainer directory
            os.makedirs(trainer_dir, exist_ok=True)
            
            progress_label.config(text="ƒêang x·ª≠ l√Ω ·∫£nh t·ª´ dataset...")
            
            # Use the same logic as 02_face_training_fixed.py
            faces = []
            ids = []
            
            image_paths = [os.path.join(dataset_dir, f) for f in os.listdir(dataset_dir) if f.endswith('.jpg')]
            
            if not image_paths:
                messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y file ·∫£nh (.jpg) trong dataset!")
                progress_window.destroy()
                return
            
            progress_label.config(text=f"ƒêang x·ª≠ l√Ω {len(image_paths)} ·∫£nh...")
            
            for image_path in image_paths:
                try:
                    # Convert to grayscale using PIL (same as original script)
                    from PIL import Image
                    pil_img = Image.open(image_path).convert('L')
                    img_numpy = np.array(pil_img, 'uint8')
                    
                    # Get ID from filename (format: User.ID.count.jpg)
                    filename = os.path.basename(image_path)
                    user_id = int(filename.split(".")[1])
                    
                    # Use the whole face image (already cropped from dataset creation)
                    faces.append(img_numpy)
                    ids.append(user_id)
                    
                    print(f"Processed: {filename} -> ID: {user_id}")
                    
                except Exception as e:
                    print(f"Error processing {image_path}: {e}")
                    continue
            
            if not faces:
                messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y ·∫£nh h·ª£p l·ªá ƒë·ªÉ training!")
                progress_window.destroy()
                return
            
            progress_label.config(text=f"ƒêang l∆∞u training data...")
            
            # Convert to numpy arrays (same as original script)
            faces_array = np.array(faces, dtype=object)  # Use object dtype for variable-sized arrays
            ids_array = np.array(ids)
            
            # Save the training data as numpy files
            np.save(os.path.join(trainer_dir, 'faces_data.npy'), faces_array)
            np.save(os.path.join(trainer_dir, 'ids_data.npy'), ids_array)
            
            progress_label.config(text="Training ho√†n th√†nh!")
            
            # Get unique IDs
            unique_ids = np.unique(ids_array)
            
            # Show success message
            messagebox.showinfo(
                "Training Th√†nh c√¥ng", 
                f"‚úÖ Training ho√†n th√†nh!\n\n"
                f"üìä Th·ªëng k√™:\n"
                f"‚Ä¢ T·ªïng s·ªë ·∫£nh: {len(faces)}\n"
                f"‚Ä¢ S·ªë h·ªçc sinh: {len(unique_ids)}\n"
                f"‚Ä¢ ID h·ªçc sinh: {list(unique_ids)}\n\n"
                f"üìÅ Files ƒë√£ t·∫°o:\n"
                f"‚Ä¢ data/trainer/faces_data.npy\n"
                f"‚Ä¢ data/trainer/ids_data.npy\n\n"
                f"H·ªá th·ªëng s·ª≠ d·ª•ng numpy-based matching\n"
                f"(kh√¥ng c·∫ßn opencv-contrib-python)"
            )
            
            # Reload the face recognition system
            self.load_face_names()
            self.load_training_data()  # Reload training data
            
            progress_window.destroy()
            
        except Exception as e:
            messagebox.showerror("L·ªói Training", f"L·ªói trong qu√° tr√¨nh training: {e}")
            if progress_window.winfo_exists():
                progress_window.destroy()
    
    def open_dataset_folder(self):
        """M·ªü th∆∞ m·ª•c dataset"""
        try:
            project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
            dataset_dir = os.path.join(project_root, 'data', 'dataset')
            os.makedirs(dataset_dir, exist_ok=True)
            
            # Open folder in file explorer
            if os.name == 'nt':  # Windows
                os.startfile(dataset_dir)
            elif os.name == 'posix':  # macOS/Linux
                os.system(f'open "{dataset_dir}"' if sys.platform == 'darwin' else f'xdg-open "{dataset_dir}"')
                
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ m·ªü th∆∞ m·ª•c dataset: {e}")
    
    def reload_face_model(self):
        """Reload face recognition model"""
        try:
            self.init_face_recognition()
            self.load_face_names()
            messagebox.showinfo("Th√†nh c√¥ng", "‚úÖ ƒê√£ reload face recognition model!")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ reload model: {e}")
    
    def create_face_data_backup(self, dataset_dir, trainer_dir):
        """T·∫°o backup d·ªØ li·ªáu ·∫£nh khi kh√¥ng c√≥ face recognizer"""
        try:
            os.makedirs(trainer_dir, exist_ok=True)
            
            # Create simple data backup
            faces = []
            ids = []
            
            for filename in os.listdir(dataset_dir):
                if filename.endswith('.jpg'):
                    try:
                        parts = filename.split('.')
                        if len(parts) >= 3 and parts[0] == 'User':
                            user_id = int(parts[1])
                            
                            # Load image
                            img_path = os.path.join(dataset_dir, filename)
                            face_img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
                            
                            if face_img is not None:
                                faces.append(face_img)
                                ids.append(user_id)
                    
                    except (ValueError, IndexError):
                        continue
            
            # Save face data for future use
            if faces:
                np.save(os.path.join(trainer_dir, 'faces_data.npy'), faces)
                np.save(os.path.join(trainer_dir, 'ids_data.npy'), ids)
                
                messagebox.showinfo(
                    "Backup ho√†n th√†nh", 
                    f"‚úÖ ƒê√£ backup {len(faces)} ·∫£nh t·ª´ {len(set(ids))} h·ªçc sinh.\n\n"
                    "H·ªá th·ªëng s·∫Ω ch·ªâ s·ª≠ d·ª•ng face detection.\n"
                    "ƒê·ªÉ c√≥ ƒë·∫ßy ƒë·ªß face recognition, vui l√≤ng c√†i ƒë·∫∑t opencv-contrib-python."
                )
            else:
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng t√¨m th·∫•y ·∫£nh h·ª£p l·ªá ƒë·ªÉ backup!")
                
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫°o backup: {e}")
    
    # === Face Data Collection Methods ===
    def start_face_collection(self, student_id, student_name):
        """B·∫Øt ƒë·∫ßu thu th·∫≠p d·ªØ li·ªáu khu√¥n m·∫∑t cho h·ªçc sinh"""
        try:
            # Check if camera is available
            collection_camera = cv2.VideoCapture(0)
            if not collection_camera.isOpened():
                messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ m·ªü camera ƒë·ªÉ thu th·∫≠p ·∫£nh")
                return
            
            # Create dataset directory if it doesn't exist  
            # __file__ is in src/gui/main_app.py, so we need 3 dirname() to get to project root
            project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
            dataset_dir = os.path.join(project_root, 'data', 'dataset')
            os.makedirs(dataset_dir, exist_ok=True)
            
            # Initialize variables for face collection
            face_id = student_id  # Use database ID as face ID
            count = 0
            max_samples = 30
            
            # Create a new window for face collection
            collection_window = tk.Toplevel(self.root)
            collection_window.title(f"Thu th·∫≠p ·∫£nh - {student_name}")
            collection_window.geometry("800x600")
            collection_window.configure(bg='#2c3e50')
            
            # Title
            title_label = tk.Label(
                collection_window,
                text=f"üì∏ Thu th·∫≠p ·∫£nh khu√¥n m·∫∑t\n{student_name}",
                font=('Arial', 16, 'bold'),
                fg='white',
                bg='#2c3e50',
                pady=20
            )
            title_label.pack()
            
            # Progress info
            self.progress_label = tk.Label(
                collection_window,
                text=f"ƒê√£ thu th·∫≠p: 0/{max_samples} ·∫£nh",
                font=('Arial', 12, 'bold'),
                fg='white',
                bg='#2c3e50'
            )
            self.progress_label.pack(pady=10)
            
            # Camera display for collection
            self.collection_label = tk.Label(collection_window, bg='black')
            self.collection_label.pack(padx=20, pady=10)
            
            # Instructions
            instruction_text = """
üî∏ H∆∞·ªõng d·∫´n thu th·∫≠p ·∫£nh:
‚Ä¢ Nh√¨n th·∫≥ng v√†o camera
‚Ä¢ T·ª´ t·ª´ xoay ƒë·∫ßu sang tr√°i, ph·∫£i, l√™n, xu·ªëng
‚Ä¢ Thay ƒë·ªïi bi·ªÉu c·∫£m (c∆∞·ªùi, nghi√™m t√∫c, ...)
‚Ä¢ ƒê·∫£m b·∫£o √°nh s√°ng ƒë·∫ßy ƒë·ªß
‚Ä¢ Tr√°nh che m·∫∑t b·∫±ng tay ho·∫∑c v·∫≠t d·ª•ng
            """
            
            instruction_label = tk.Label(
                collection_window,
                text=instruction_text,
                font=('Arial', 10),
                fg='white',
                bg='#2c3e50',
                justify='left'
            )
            instruction_label.pack(pady=10)
            
            # Control buttons
            button_frame = tk.Frame(collection_window, bg='#2c3e50')
            button_frame.pack(pady=10)
            
            def close_collection():
                nonlocal collection_camera
                if collection_camera:
                    collection_camera.release()
                collection_window.destroy()
                messagebox.showinfo("Th√¥ng b√°o", f"ƒê√£ thu th·∫≠p {count} ·∫£nh cho {student_name}")
            
            tk.Button(
                button_frame,
                text="‚ùå D·ª´ng thu th·∫≠p",
                command=close_collection,
                bg='#e74c3c',
                fg='white',
                font=('Arial', 12, 'bold'),
                padx=20
            ).pack(side='left', padx=10)
            
            # Start collection thread
            collection_thread = threading.Thread(
                target=self.collect_face_samples,
                args=(collection_camera, face_id, student_name, max_samples, collection_window),
                daemon=True
            )
            collection_thread.start()
            
            # Handle window close
            collection_window.protocol("WM_DELETE_WINDOW", close_collection)
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu thu th·∫≠p ·∫£nh: {e}")
    
    def collect_face_samples(self, camera, face_id, student_name, max_samples, window):
        """Thu th·∫≠p c√°c m·∫´u ·∫£nh khu√¥n m·∫∑t"""
        count = 0
        project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
        dataset_dir = os.path.join(project_root, 'data', 'dataset')
        
        while count < max_samples and camera.isOpened():
            try:
                ret, frame = camera.read()
                if not ret:
                    break
                
                # Flip frame horizontally
                frame = cv2.flip(frame, 1)
                gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
                
                # Detect faces
                faces = self.face_cascade.detectMultiScale(gray, 1.3, 5)
                
                for (x, y, w, h) in faces:
                    # Draw rectangle around face
                    cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
                    
                    # Increment count (same logic as original 01_face_dataset.py)
                    count += 1
                    
                    # Extract and save face region immediately (like original)
                    face_img = gray[y:y+h, x:x+w]
                    
                    # Save image with original naming convention
                    img_name = f"User.{face_id}.{count}.jpg"
                    img_path = os.path.join(dataset_dir, img_name)
                    cv2.imwrite(img_path, face_img)
                    
                    print(f"üì∏ Saved: {img_name}")
                    
                    # Add delay to get variety in poses (like original dataset collection)
                    time.sleep(0.2)  # 200ms delay between captures
                    
                    # Break if we have enough samples
                    if count >= max_samples:
                        break
                    
                    # Update progress
                    if hasattr(self, 'progress_label'):
                        self.progress_label.config(text=f"ƒê√£ thu th·∫≠p: {count}/{max_samples} ·∫£nh")
                    
                    # Add text to frame
                    cv2.putText(frame, f"Sample: {count}/{max_samples}", (x, y-10), 
                              cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
                
                # Convert and display frame
                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                frame_pil = Image.fromarray(frame_rgb)
                frame_pil = frame_pil.resize((640, 480), Image.Resampling.LANCZOS)
                frame_tk = ImageTk.PhotoImage(frame_pil)
                
                # Update display if window still exists
                if hasattr(self, 'collection_label') and self.collection_label.winfo_exists():
                    self.collection_label.config(image=frame_tk)
                    self.collection_label.image = frame_tk
                
                time.sleep(0.1)  # Small delay between captures
                
                # Break if we have enough samples or window is closed
                if count >= max_samples or not window.winfo_exists():
                    break
                    
            except Exception as e:
                print(f"Error in face collection: {e}")
                break
        
        # Cleanup
        camera.release()
        
        # Show completion message
        if count >= max_samples:
            messagebox.showinfo(
                "Ho√†n th√†nh", 
                f"‚úÖ ƒê√£ thu th·∫≠p ƒë·ªß {max_samples} ·∫£nh cho {student_name}!\n\n"
                "B√¢y gi·ªù b·∫°n c√≥ th·ªÉ train model ƒë·ªÉ nh·∫≠n di·ªán h·ªçc sinh n√†y."
            )
        
        # Close collection window
        if window.winfo_exists():
            window.destroy()
    
    def __del__(self):
        """Cleanup when object is destroyed"""
        if hasattr(self, 'camera') and self.camera is not None:
            self.camera.release()
    
    def on_student_select(self, event):
        """X·ª≠ l√Ω khi ch·ªçn h·ªçc sinh t·ª´ danh s√°ch"""
        try:
            selected = self.student_tree.selection()
            if not selected:
                return
            
            # L·∫•y th√¥ng tin h·ªçc sinh ƒë∆∞·ª£c ch·ªçn
            item = self.student_tree.item(selected[0])
            student_db_id = item['values'][0]  # ID c·ªôt ƒë·∫ßu ti√™n trong TreeView
            
            # L·∫•y th√¥ng tin chi ti·∫øt t·ª´ database
            student = self.db.get_student_by_id(student_db_id)
            if student:
                # Fill form v·ªõi th√¥ng tin h·ªçc sinh
                # student structure: (id, student_id, full_name, class_id, email, phone, address, photo_path, is_active, created_at, class_name, class_code)
                self.student_id_var.set(student[1] or '')   # student_id
                self.full_name_var.set(student[2] or '')    # full_name
                self.email_var.set(student[4] or '')        # email
                self.phone_var.set(student[5] or '')        # phone
                
                # Set class in combobox
                if student[10]:  # class_name
                    self.new_class_var.set(student[10])
                else:
                    self.new_class_var.set('')
        except Exception as e:
            print(f"Error loading student details: {e}")
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i th√¥ng tin h·ªçc sinh: {e}")
    
    def clear_student_form(self):
        """X√≥a t·∫•t c·∫£ th√¥ng tin trong form h·ªçc sinh"""
        self.student_id_var.set('')
        self.full_name_var.set('')
        self.email_var.set('')
        self.phone_var.set('')
        self.new_class_var.set('')
        
        # Clear selection in tree
        for item in self.student_tree.selection():
            self.student_tree.selection_remove(item)
    
    # =============================================================================
    # REPORTS FUNCTIONALITY
    # =============================================================================
    
    def init_report_data(self):
        """Initialize report data and options"""
        try:
            # Import report generator
            from reports.report_generator import AttendanceReportGenerator
            
            # Initialize report generator
            project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
            db_path = os.path.join(project_root, 'data', 'attendance.db')
            self.report_generator = AttendanceReportGenerator(db_path)
            
            # Load classes for filter
            classes = self.db.get_all_classes()
            class_names = ["T·∫•t c·∫£ l·ªõp"] + [f"{cls[1]} - {cls[2]}" for cls in classes]
            self.report_class_combo['values'] = class_names
            if class_names:
                self.report_class_combo.set(class_names[0])
                
            # Load students for filter
            students = self.db.get_all_students()
            student_names = ["T·∫•t c·∫£ h·ªçc sinh"] + [f"{student[2]} ({student[1]})" for student in students]
            self.report_student_combo['values'] = student_names
            if student_names:
                self.report_student_combo.set(student_names[0])
                
        except Exception as e:
            print(f"‚ùå Error initializing report data: {e}")
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ kh·ªüi t·∫°o module b√°o c√°o: {e}")
    
    def update_report_options(self):
        """Update report options based on selected type"""
        report_type = self.report_type_var.get()
        
        # Hide all optional frames first
        self.class_filter_frame.pack_forget()
        self.student_filter_frame.pack_forget()
        
        # Show relevant options based on report type
        if report_type in ["class", "summary"]:
            self.class_filter_frame.pack(fill='x', pady=(0, 15))
        elif report_type == "student":
            self.class_filter_frame.pack(fill='x', pady=(0, 15))
            self.student_filter_frame.pack(fill='x', pady=(0, 15))
    
    def set_quick_date_range(self, days):
        """Set quick date range"""
        end_date = datetime.now()
        if days == 0:  # Today
            start_date = end_date
        else:
            start_date = end_date - timedelta(days=days)
        
        self.from_date_var.set(start_date.strftime('%Y-%m-%d'))
        self.to_date_var.set(end_date.strftime('%Y-%m-%d'))
    
    def generate_report_preview(self):
        """Generate and display report preview"""
        try:
            if not hasattr(self, 'report_generator'):
                self.init_report_data()
            
            report_type = self.report_type_var.get()
            start_date = self.from_date_var.get()
            end_date = self.to_date_var.get()
            
            # Validate dates
            try:
                datetime.strptime(start_date, '%Y-%m-%d')
                datetime.strptime(end_date, '%Y-%m-%d')
            except ValueError:
                messagebox.showerror("L·ªói", "ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng YYYY-MM-DD")
                return
            
            # Clear existing report
            for item in self.report_tree.get_children():
                self.report_tree.delete(item)
            
            # Generate report based on type
            if report_type == "daily":
                data = self.report_generator.get_attendance_by_date_range(start_date, end_date)
                self._display_daily_report(data)
                
            elif report_type == "class":
                class_id = self._get_selected_class_id()
                data = self.report_generator.get_attendance_by_date_range(start_date, end_date, class_id)
                self._display_class_report(data)
                
            elif report_type == "student":
                student_id = self._get_selected_student_id()
                data = self.report_generator.get_student_attendance_summary(start_date, end_date, student_id)
                self._display_student_report(data)
                
            elif report_type == "summary":
                data = self.report_generator.get_daily_attendance_summary(start_date, end_date)
                self._display_summary_report(data)
                
            elif report_type == "trends":
                data = self.report_generator.get_attendance_trends(30)
                self._display_trends_report(data)
            
            # Update summary
            self._update_report_summary(start_date, end_date)
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫°o b√°o c√°o: {e}")
            print(f"Report error: {e}")
    
    def _get_selected_class_id(self):
        """Get selected class ID from combo"""
        class_text = self.report_class_var.get()
        if class_text == "T·∫•t c·∫£ l·ªõp" or not class_text:
            return None
        
        classes = self.db.get_all_classes()
        for cls in classes:
            if f"{cls[1]} - {cls[2]}" == class_text:
                return cls[0]
        return None
    
    def _get_selected_student_id(self):
        """Get selected student ID from combo"""
        student_text = self.report_student_var.get()
        if student_text == "T·∫•t c·∫£ h·ªçc sinh" or not student_text:
            return None
            
        students = self.db.get_all_students()
        for student in students:
            if f"{student[2]} ({student[1]})" == student_text:
                return student[0]
        return None
    
    def _display_daily_report(self, data):
        """Display daily attendance report"""
        if data.empty:
            self._show_no_data_message()
            return
            
        # Configure columns
        columns = ['Ng√†y', 'Gi·ªù', 'H·ªçc sinh', 'M√£ HS', 'L·ªõp', 'ƒê·ªô tin c·∫≠y', 'Phi√™n']
        self.report_tree['columns'] = columns
        self.report_tree['show'] = 'headings'
        
        # Set column headers and widths
        for col in columns:
            self.report_tree.heading(col, text=col)
            self.report_tree.column(col, width=120, anchor='center')
        
        # Insert data
        for _, row in data.iterrows():
            self.report_tree.insert('', 'end', values=[
                str(row['date'])[:10] if pd.notna(row['date']) else '',
                str(row['time'])[:8] if pd.notna(row['time']) else '',
                row['student_name'],
                row['student_code'],
                row['class_name'],
                f"{row['confidence_score']:.1f}%" if pd.notna(row['confidence_score']) else '',
                row['session_name'] if pd.notna(row['session_name']) else ''
            ])
    
    def _display_class_report(self, data):
        """Display class attendance report"""
        self._display_daily_report(data)  # Same format as daily report
    
    def _display_student_report(self, data):
        """Display student attendance summary"""
        if data.empty:
            self._show_no_data_message()
            return
            
        columns = ['H·ªçc sinh', 'M√£ HS', 'L·ªõp', 'Ng√†y c√≥ m·∫∑t', 'T·ªïng phi√™n', 'T·ª∑ l·ªá (%)']
        self.report_tree['columns'] = columns
        self.report_tree['show'] = 'headings'
        
        for col in columns:
            self.report_tree.heading(col, text=col)
            self.report_tree.column(col, width=120, anchor='center')
        
        for _, row in data.iterrows():
            self.report_tree.insert('', 'end', values=[
                row['student_name'],
                row['student_code'],
                row['class_name'],
                int(row['days_present']) if pd.notna(row['days_present']) else 0,
                int(row['total_sessions']) if pd.notna(row['total_sessions']) else 0,
                f"{row['attendance_percentage']:.1f}%" if pd.notna(row['attendance_percentage']) else '0%'
            ])
    
    def _display_summary_report(self, data):
        """Display daily summary report"""
        if data.empty:
            self._show_no_data_message()
            return
            
        columns = ['Ng√†y', 'L·ªõp', 'C√≥ m·∫∑t', 'T·ªïng HS', 'T·ª∑ l·ªá (%)']
        self.report_tree['columns'] = columns
        self.report_tree['show'] = 'headings'
        
        for col in columns:
            self.report_tree.heading(col, text=col)
            self.report_tree.column(col, width=120, anchor='center')
        
        for _, row in data.iterrows():
            self.report_tree.insert('', 'end', values=[
                row['attendance_date'],
                row['class_name'],
                int(row['present_count']),
                int(row['total_students']),
                f"{row['attendance_rate']:.1f}%"
            ])
    
    def _display_trends_report(self, data):
        """Display trends report"""
        if data.empty:
            self._show_no_data_message()
            return
            
        columns = ['Ng√†y', 'H·ªçc sinh duy nh·∫•t', 'T·ªïng b·∫£n ghi', 'ƒê·ªô tin c·∫≠y TB']
        self.report_tree['columns'] = columns
        self.report_tree['show'] = 'headings'
        
        for col in columns:
            self.report_tree.heading(col, text=col)
            self.report_tree.column(col, width=150, anchor='center')
        
        for _, row in data.iterrows():
            self.report_tree.insert('', 'end', values=[
                row['date'],
                int(row['unique_students']),
                int(row['total_records']),
                f"{row['avg_confidence']:.1f}%" if pd.notna(row['avg_confidence']) else ''
            ])
    
    def _show_no_data_message(self):
        """Show message when no data available"""
        self.report_tree['columns'] = ['Th√¥ng b√°o']
        self.report_tree['show'] = 'headings'
        self.report_tree.heading('Th√¥ng b√°o', text='Th√¥ng b√°o')
        self.report_tree.column('Th√¥ng b√°o', width=400, anchor='center')
        self.report_tree.insert('', 'end', values=['Kh√¥ng c√≥ d·ªØ li·ªáu trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn'])
    
    def _update_report_summary(self, start_date, end_date):
        """Update report summary display"""
        try:
            summary = self.report_generator.get_report_summary(start_date, end_date)
            
            # Clear existing summary
            for widget in self.report_summary_frame.winfo_children():
                widget.destroy()
            
            # Create summary display
            summary_text = f"""
üìä T√≥m t·∫Øt b√°o c√°o ({summary['date_range']})
‚Ä¢ T·ªïng b·∫£n ghi: {summary['total_records']}
‚Ä¢ H·ªçc sinh tham gia: {summary['unique_students']}
‚Ä¢ S·ªë l·ªõp tham gia: {summary['classes_count']}
‚Ä¢ ƒê·ªô tin c·∫≠y trung b√¨nh: {summary['avg_confidence']}%
‚Ä¢ Ng√†y ho·∫°t ƒë·ªông cao nh·∫•t: {summary['most_active_day']} ({summary['most_active_day_count']} b·∫£n ghi)
            """.strip()
            
            tk.Label(
                self.report_summary_frame,
                text=summary_text,
                font=('Arial', 10),
                bg='#ecf0f1',
                relief='sunken',
                anchor='w',
                justify='left',
                padx=10,
                pady=5
            ).pack(fill='x')
            
        except Exception as e:
            print(f"Error updating summary: {e}")
    
    def export_excel_report(self):
        """Export current report to Excel"""
        try:
            if not hasattr(self, 'report_generator'):
                messagebox.showerror("L·ªói", "Vui l√≤ng t·∫°o b√°o c√°o tr∆∞·ªõc khi xu·∫•t!")
                return
            
            start_date = self.from_date_var.get()
            end_date = self.to_date_var.get()
            
            # Choose output file
            filename = filedialog.asksaveasfilename(
                title="L∆∞u b√°o c√°o Excel",
                defaultextension=".xlsx",
                filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")],
                initialname=f"attendance_report_{start_date}_{end_date}.xlsx"
            )
            
            if not filename:
                return
            
            # Export report
            output_path = self.report_generator.export_comprehensive_report(
                start_date, end_date, filename
            )
            
            messagebox.showinfo(
                "Th√†nh c√¥ng", 
                f"B√°o c√°o ƒë√£ ƒë∆∞·ª£c xu·∫•t th√†nh c√¥ng!\n\nFile: {output_path}"
            )
            
            # Ask to open file
            if messagebox.askyesno("M·ªü file", "B·∫°n c√≥ mu·ªën m·ªü file Excel v·ª´a t·∫°o kh√¥ng?"):
                os.startfile(output_path)
                
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t b√°o c√°o: {e}")
    
    def show_report_charts(self):
        """Show report charts in new window"""
        try:
            if not hasattr(self, 'report_generator'):
                messagebox.showerror("L·ªói", "Vui l√≤ng t·∫°o b√°o c√°o tr∆∞·ªõc khi xem bi·ªÉu ƒë·ªì!")
                return
            
            start_date = self.from_date_var.get()
            end_date = self.to_date_var.get()
            
            # Create charts window
            charts_window = tk.Toplevel(self.root)
            charts_window.title("üìà Bi·ªÉu ƒë·ªì B√°o c√°o ƒêi·ªÉm danh")
            charts_window.geometry("1000x700")
            charts_window.configure(bg='white')
            
            # Create notebook for different charts
            charts_notebook = ttk.Notebook(charts_window)
            charts_notebook.pack(fill='both', expand=True, padx=10, pady=10)
            
            # Generate charts
            charts = self.report_generator.create_attendance_visualization(start_date, end_date)
            
            if charts:
                for chart_name, chart_data in charts.items():
                    # Create frame for this chart
                    chart_frame = ttk.Frame(charts_notebook)
                    
                    # Decode and display chart
                    import base64
                    from io import BytesIO
                    
                    image_data = base64.b64decode(chart_data)
                    image = Image.open(BytesIO(image_data))
                    photo = ImageTk.PhotoImage(image)
                    
                    label = tk.Label(chart_frame, image=photo)
                    label.image = photo  # Keep a reference
                    label.pack(padx=10, pady=10)
                    
                    # Add to notebook
                    chart_titles = {
                        'daily_trend': 'Xu h∆∞·ªõng h√†ng ng√†y',
                        'hourly_pattern': 'Ph√¢n b·ªë theo gi·ªù',
                        'class_comparison': 'So s√°nh l·ªõp h·ªçc'
                    }
                    
                    charts_notebook.add(chart_frame, text=chart_titles.get(chart_name, chart_name))
            else:
                tk.Label(
                    charts_window,
                    text="Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ t·∫°o bi·ªÉu ƒë·ªì",
                    font=('Arial', 14),
                    fg='gray'
                ).pack(expand=True)
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì: {e}")
            print(f"Charts error: {e}")

def main():
    root = tk.Tk()
    app = AttendanceSystemGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()